/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package test.fixtures.patch;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class MyStructField30Patch implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("MyStructField30Patch");
  private static final TField ASSIGN_FIELD_DESC = new TField("assign", TType.MAP, (short)1);
  private static final TField CLEAR_FIELD_DESC = new TField("clear", TType.BOOL, (short)2);
  private static final TField PATCH_PRIOR_FIELD_DESC = new TField("patchPrior", TType.MAP, (short)3);
  private static final TField ADD_FIELD_DESC = new TField("add", TType.MAP, (short)5);
  private static final TField PATCH_FIELD_DESC = new TField("patch", TType.MAP, (short)6);
  private static final TField REMOVE_FIELD_DESC = new TField("remove", TType.SET, (short)7);
  private static final TField PUT_FIELD_DESC = new TField("put", TType.MAP, (short)9);

  /**
   * Assigns to a (set) value.
   * 
   * If set, all other operations are ignored.
   * 
   * Note: Optional and union fields must be set before assigned.
   * 
   */
  public final Map<String,Map<String,Integer>> assign;
  /**
   * Clears a value. Applies first.
   */
  public final Boolean clear;
  /**
   * Patches any previously set values. Applies second.
   */
  public final Map<String,MyStructField30Patch1> patchPrior;
  /**
   * Add the given values, if the keys are not already present. Applies forth.
   */
  public final Map<String,Map<String,Integer>> add;
  /**
   * Patches any set value, including newly set values. Applies last.
   */
  public final Map<String,MyStructField30Patch1> patch;
  /**
   * Removes entries, if present. Applies third.
   */
  public final Set<String> remove;
  /**
   * Adds or replaces the given key/value pairs. Applies fifth.
   */
  public final Map<String,Map<String,Integer>> put;
  public static final int ASSIGN = 1;
  public static final int CLEAR = 2;
  public static final int PATCHPRIOR = 3;
  public static final int ADD = 5;
  public static final int PATCH = 6;
  public static final int REMOVE = 7;
  public static final int PUT = 9;

  public MyStructField30Patch(
      Map<String,Map<String,Integer>> assign,
      Boolean clear,
      Map<String,MyStructField30Patch1> patchPrior,
      Map<String,Map<String,Integer>> add,
      Map<String,MyStructField30Patch1> patch,
      Set<String> remove,
      Map<String,Map<String,Integer>> put) {
    this.assign = assign;
    this.clear = clear;
    this.patchPrior = patchPrior;
    this.add = add;
    this.patch = patch;
    this.remove = remove;
    this.put = put;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MyStructField30Patch(MyStructField30Patch other) {
    if (other.isSetAssign()) {
      this.assign = TBaseHelper.deepCopy(other.assign);
    } else {
      this.assign = null;
    }
    if (other.isSetClear()) {
      this.clear = TBaseHelper.deepCopy(other.clear);
    } else {
      this.clear = null;
    }
    if (other.isSetPatchPrior()) {
      this.patchPrior = TBaseHelper.deepCopy(other.patchPrior);
    } else {
      this.patchPrior = null;
    }
    if (other.isSetAdd()) {
      this.add = TBaseHelper.deepCopy(other.add);
    } else {
      this.add = null;
    }
    if (other.isSetPatch()) {
      this.patch = TBaseHelper.deepCopy(other.patch);
    } else {
      this.patch = null;
    }
    if (other.isSetRemove()) {
      this.remove = TBaseHelper.deepCopy(other.remove);
    } else {
      this.remove = null;
    }
    if (other.isSetPut()) {
      this.put = TBaseHelper.deepCopy(other.put);
    } else {
      this.put = null;
    }
  }

  public MyStructField30Patch deepCopy() {
    return new MyStructField30Patch(this);
  }

  /**
   * Assigns to a (set) value.
   * 
   * If set, all other operations are ignored.
   * 
   * Note: Optional and union fields must be set before assigned.
   * 
   */
  public Map<String,Map<String,Integer>> getAssign() {
    return this.assign;
  }

  // Returns true if field assign is set (has been assigned a value) and false otherwise
  public boolean isSetAssign() {
    return this.assign != null;
  }

  /**
   * Clears a value. Applies first.
   */
  public Boolean isClear() {
    return this.clear;
  }

  // Returns true if field clear is set (has been assigned a value) and false otherwise
  public boolean isSetClear() {
    return this.clear != null;
  }

  /**
   * Patches any previously set values. Applies second.
   */
  public Map<String,MyStructField30Patch1> getPatchPrior() {
    return this.patchPrior;
  }

  // Returns true if field patchPrior is set (has been assigned a value) and false otherwise
  public boolean isSetPatchPrior() {
    return this.patchPrior != null;
  }

  /**
   * Add the given values, if the keys are not already present. Applies forth.
   */
  public Map<String,Map<String,Integer>> getAdd() {
    return this.add;
  }

  // Returns true if field add is set (has been assigned a value) and false otherwise
  public boolean isSetAdd() {
    return this.add != null;
  }

  /**
   * Patches any set value, including newly set values. Applies last.
   */
  public Map<String,MyStructField30Patch1> getPatch() {
    return this.patch;
  }

  // Returns true if field patch is set (has been assigned a value) and false otherwise
  public boolean isSetPatch() {
    return this.patch != null;
  }

  /**
   * Removes entries, if present. Applies third.
   */
  public Set<String> getRemove() {
    return this.remove;
  }

  // Returns true if field remove is set (has been assigned a value) and false otherwise
  public boolean isSetRemove() {
    return this.remove != null;
  }

  /**
   * Adds or replaces the given key/value pairs. Applies fifth.
   */
  public Map<String,Map<String,Integer>> getPut() {
    return this.put;
  }

  // Returns true if field put is set (has been assigned a value) and false otherwise
  public boolean isSetPut() {
    return this.put != null;
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof MyStructField30Patch))
      return false;
    MyStructField30Patch that = (MyStructField30Patch)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetAssign(), that.isSetAssign(), this.assign, that.assign)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetClear(), that.isSetClear(), this.clear, that.clear)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetPatchPrior(), that.isSetPatchPrior(), this.patchPrior, that.patchPrior)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetAdd(), that.isSetAdd(), this.add, that.add)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetPatch(), that.isSetPatch(), this.patch, that.patch)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetRemove(), that.isSetRemove(), this.remove, that.remove)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetPut(), that.isSetPut(), this.put, that.put)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {assign, clear, patchPrior, add, patch, remove, put});
  }

  // This is required to satisfy the TBase interface, but can't be implemented on immutable struture.
  public void read(TProtocol iprot) throws TException {
    throw new TException("unimplemented in android immutable structure");
  }

  public static MyStructField30Patch deserialize(TProtocol iprot) throws TException {
    Map<String,Map<String,Integer>> tmp_assign = null;
    Boolean tmp_clear = null;
    Map<String,MyStructField30Patch1> tmp_patchPrior = null;
    Map<String,Map<String,Integer>> tmp_add = null;
    Map<String,MyStructField30Patch1> tmp_patch = null;
    Set<String> tmp_remove = null;
    Map<String,Map<String,Integer>> tmp_put = null;
    TField __field;
    iprot.readStructBegin();
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case ASSIGN:
          if (__field.type == TType.MAP) {
            {
              TMap _map129 = iprot.readMapBegin();
              tmp_assign = new HashMap<String,Map<String,Integer>>(Math.max(0, 2*_map129.size));
              for (int _i130 = 0; 
                   (_map129.size < 0) ? iprot.peekMap() : (_i130 < _map129.size); 
                   ++_i130)
              {
                String _key131;
                Map<String,Integer> _val132;
                _key131 = iprot.readString();
                {
                  TMap _map133 = iprot.readMapBegin();
                  _val132 = new HashMap<String,Integer>(Math.max(0, 2*_map133.size));
                  for (int _i134 = 0; 
                       (_map133.size < 0) ? iprot.peekMap() : (_i134 < _map133.size); 
                       ++_i134)
                  {
                    String _key135;
                    Integer _val136;
                    _key135 = iprot.readString();
                    _val136 = iprot.readI32();
                    _val132.put(_key135, _val136);
                  }
                  iprot.readMapEnd();
                }
                tmp_assign.put(_key131, _val132);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case CLEAR:
          if (__field.type == TType.BOOL) {
            tmp_clear = iprot.readBool();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case PATCHPRIOR:
          if (__field.type == TType.MAP) {
            {
              TMap _map137 = iprot.readMapBegin();
              tmp_patchPrior = new HashMap<String,MyStructField30Patch1>(Math.max(0, 2*_map137.size));
              for (int _i138 = 0; 
                   (_map137.size < 0) ? iprot.peekMap() : (_i138 < _map137.size); 
                   ++_i138)
              {
                String _key139;
                MyStructField30Patch1 _val140;
                _key139 = iprot.readString();
                _val140 = MyStructField30Patch1.deserialize(iprot);
                tmp_patchPrior.put(_key139, _val140);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADD:
          if (__field.type == TType.MAP) {
            {
              TMap _map141 = iprot.readMapBegin();
              tmp_add = new HashMap<String,Map<String,Integer>>(Math.max(0, 2*_map141.size));
              for (int _i142 = 0; 
                   (_map141.size < 0) ? iprot.peekMap() : (_i142 < _map141.size); 
                   ++_i142)
              {
                String _key143;
                Map<String,Integer> _val144;
                _key143 = iprot.readString();
                {
                  TMap _map145 = iprot.readMapBegin();
                  _val144 = new HashMap<String,Integer>(Math.max(0, 2*_map145.size));
                  for (int _i146 = 0; 
                       (_map145.size < 0) ? iprot.peekMap() : (_i146 < _map145.size); 
                       ++_i146)
                  {
                    String _key147;
                    Integer _val148;
                    _key147 = iprot.readString();
                    _val148 = iprot.readI32();
                    _val144.put(_key147, _val148);
                  }
                  iprot.readMapEnd();
                }
                tmp_add.put(_key143, _val144);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case PATCH:
          if (__field.type == TType.MAP) {
            {
              TMap _map149 = iprot.readMapBegin();
              tmp_patch = new HashMap<String,MyStructField30Patch1>(Math.max(0, 2*_map149.size));
              for (int _i150 = 0; 
                   (_map149.size < 0) ? iprot.peekMap() : (_i150 < _map149.size); 
                   ++_i150)
              {
                String _key151;
                MyStructField30Patch1 _val152;
                _key151 = iprot.readString();
                _val152 = MyStructField30Patch1.deserialize(iprot);
                tmp_patch.put(_key151, _val152);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case REMOVE:
          if (__field.type == TType.SET) {
            {
              TSet _set153 = iprot.readSetBegin();
              tmp_remove = new HashSet<String>(Math.max(0, 2*_set153.size));
              for (int _i154 = 0; 
                   (_set153.size < 0) ? iprot.peekSet() : (_i154 < _set153.size); 
                   ++_i154)
              {
                String _elem155;
                _elem155 = iprot.readString();
                tmp_remove.add(_elem155);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case PUT:
          if (__field.type == TType.MAP) {
            {
              TMap _map156 = iprot.readMapBegin();
              tmp_put = new HashMap<String,Map<String,Integer>>(Math.max(0, 2*_map156.size));
              for (int _i157 = 0; 
                   (_map156.size < 0) ? iprot.peekMap() : (_i157 < _map156.size); 
                   ++_i157)
              {
                String _key158;
                Map<String,Integer> _val159;
                _key158 = iprot.readString();
                {
                  TMap _map160 = iprot.readMapBegin();
                  _val159 = new HashMap<String,Integer>(Math.max(0, 2*_map160.size));
                  for (int _i161 = 0; 
                       (_map160.size < 0) ? iprot.peekMap() : (_i161 < _map160.size); 
                       ++_i161)
                  {
                    String _key162;
                    Integer _val163;
                    _key162 = iprot.readString();
                    _val163 = iprot.readI32();
                    _val159.put(_key162, _val163);
                  }
                  iprot.readMapEnd();
                }
                tmp_put.put(_key158, _val159);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    MyStructField30Patch _that;
    _that = new MyStructField30Patch(
      tmp_assign
      ,tmp_clear
      ,tmp_patchPrior
      ,tmp_add
      ,tmp_patch
      ,tmp_remove
      ,tmp_put
    );
    _that.validate();
    return _that;
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.assign != null) {
      if (isSetAssign()) {
        oprot.writeFieldBegin(ASSIGN_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.MAP, this.assign.size()));
          for (Map.Entry<String, Map<String,Integer>> _iter164 : this.assign.entrySet())          {
            oprot.writeString(_iter164.getKey());
            {
              oprot.writeMapBegin(new TMap(TType.STRING, TType.I32, _iter164.getValue().size()));
              for (Map.Entry<String, Integer> _iter165 : _iter164.getValue().entrySet())              {
                oprot.writeString(_iter165.getKey());
                oprot.writeI32(_iter165.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.clear != null) {
      oprot.writeFieldBegin(CLEAR_FIELD_DESC);
      oprot.writeBool(this.clear);
      oprot.writeFieldEnd();
    }
    if (this.patchPrior != null) {
      oprot.writeFieldBegin(PATCH_PRIOR_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.patchPrior.size()));
        for (Map.Entry<String, MyStructField30Patch1> _iter166 : this.patchPrior.entrySet())        {
          oprot.writeString(_iter166.getKey());
          _iter166.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.add != null) {
      oprot.writeFieldBegin(ADD_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.MAP, this.add.size()));
        for (Map.Entry<String, Map<String,Integer>> _iter167 : this.add.entrySet())        {
          oprot.writeString(_iter167.getKey());
          {
            oprot.writeMapBegin(new TMap(TType.STRING, TType.I32, _iter167.getValue().size()));
            for (Map.Entry<String, Integer> _iter168 : _iter167.getValue().entrySet())            {
              oprot.writeString(_iter168.getKey());
              oprot.writeI32(_iter168.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.patch != null) {
      oprot.writeFieldBegin(PATCH_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.patch.size()));
        for (Map.Entry<String, MyStructField30Patch1> _iter169 : this.patch.entrySet())        {
          oprot.writeString(_iter169.getKey());
          _iter169.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.remove != null) {
      oprot.writeFieldBegin(REMOVE_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.STRING, this.remove.size()));
        for (String _iter170 : this.remove)        {
          oprot.writeString(_iter170);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.put != null) {
      oprot.writeFieldBegin(PUT_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.MAP, this.put.size()));
        for (Map.Entry<String, Map<String,Integer>> _iter171 : this.put.entrySet())        {
          oprot.writeString(_iter171.getKey());
          {
            oprot.writeMapBegin(new TMap(TType.STRING, TType.I32, _iter171.getValue().size()));
            for (Map.Entry<String, Integer> _iter172 : _iter171.getValue().entrySet())            {
              oprot.writeString(_iter172.getKey());
              oprot.writeI32(_iter172.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    return TBaseHelper.toStringHelper(this, indent, prettyPrint);
  }

  public void validate() throws TException {
    // check for required fields
  }

}

