// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package python

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var GoUnusedProtection__ int;

// Hides in thrift-py3 only, not in thrift-python
type Py3Hidden struct {
}

func NewPy3Hidden() *Py3Hidden {
  return &Py3Hidden{}
}

type Py3HiddenBuilder struct {
  obj *Py3Hidden
}

func NewPy3HiddenBuilder() *Py3HiddenBuilder{
  return &Py3HiddenBuilder{
    obj: NewPy3Hidden(),
  }
}

func (p Py3HiddenBuilder) Emit() *Py3Hidden{
  return &Py3Hidden{
  }
}

func (p *Py3Hidden) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Py3Hidden) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Py3Hidden"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Py3Hidden) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("Py3Hidden({})")
}

type Flags struct {
}

func NewFlags() *Flags {
  return &Flags{}
}

type FlagsBuilder struct {
  obj *Flags
}

func NewFlagsBuilder() *FlagsBuilder{
  return &FlagsBuilder{
    obj: NewFlags(),
  }
}

func (p FlagsBuilder) Emit() *Flags{
  return &Flags{
  }
}

func (p *Flags) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Flags) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Flags"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Flags) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("Flags({})")
}

// Attributes:
//  - Name
type Name struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewName() *Name {
  return &Name{}
}


func (p *Name) GetName() string {
  return p.Name
}
type NameBuilder struct {
  obj *Name
}

func NewNameBuilder() *NameBuilder{
  return &NameBuilder{
    obj: NewName(),
  }
}

func (p NameBuilder) Emit() *Name{
  return &Name{
    Name: p.obj.Name,
  }
}

func (n *NameBuilder) Name(name string) *NameBuilder {
  n.obj.Name = name
  return n
}

func (n *Name) SetName(name string) *Name {
  n.Name = name
  return n
}

func (p *Name) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Name)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Name = v
  }
  return nil
}

func (p *Name) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Name"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Name) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *Name) String() string {
  if p == nil {
    return "<nil>"
  }

  nameVal := fmt.Sprintf("%v", p.Name)
  return fmt.Sprintf("Name({Name:%s})", nameVal)
}

// An annotation that applies a Python adapter to typedef or field, or directly on struct.
// This completely replaces the underlying type of a thrift for a custom implementation and
// uses the specified adapter to convert to and from the underlying Thrift type during (de)serialization.
// 
// Example 1:
// 
//   @python.Adapter{name = "my.module.DatetimeAdapter", typeHint = "datetime.datetime"}
//   typedef i64 Datetime
// 
// Here the type 'Datetime' has the Python adapter `DatetimeAdapter`.
// 
// 
// Example 2:
// 
//   struct User {
//     @python.Adapter{name = "my.module.DatetimeAdapter", typeHint = "datetime.datetime"}
//     1: i64 created_at;
//   }
// Here the field `created_at` has the Python adapter `DatetimeAdapter`.
// 
// 
// Example 3:
// 
// 
//   @python.Adapter{name = "my.module.AnotherAdapter", typeHint = "my.module.AdaptedFoo"}
//   struct Foo {
//     1: string bar;
//   }
// 
// Here the struct `Foo` has the Python adapter `AnotherAdapter`.
// 
// 
// Attributes:
//  - Name: Fully qualified name of a Python adapter class, which should inherit from thrift.python.adapter.Adapter
//  - TypeHint: Fully qualified type hint the above implementation adapts to.
// If ending with "[]", it becomes a generic, and the unadapted type will be filled between the brackets.
type Adapter struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  TypeHint string `thrift:"typeHint,2" db:"typeHint" json:"typeHint"`
}

func NewAdapter() *Adapter {
  return &Adapter{}
}


func (p *Adapter) GetName() string {
  return p.Name
}

func (p *Adapter) GetTypeHint() string {
  return p.TypeHint
}
type AdapterBuilder struct {
  obj *Adapter
}

func NewAdapterBuilder() *AdapterBuilder{
  return &AdapterBuilder{
    obj: NewAdapter(),
  }
}

func (p AdapterBuilder) Emit() *Adapter{
  return &Adapter{
    Name: p.obj.Name,
    TypeHint: p.obj.TypeHint,
  }
}

func (a *AdapterBuilder) Name(name string) *AdapterBuilder {
  a.obj.Name = name
  return a
}

func (a *AdapterBuilder) TypeHint(typeHint string) *AdapterBuilder {
  a.obj.TypeHint = typeHint
  return a
}

func (a *Adapter) SetName(name string) *Adapter {
  a.Name = name
  return a
}

func (a *Adapter) SetTypeHint(typeHint string) *Adapter {
  a.TypeHint = typeHint
  return a
}

func (p *Adapter) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Adapter)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Name = v
  }
  return nil
}

func (p *Adapter)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.TypeHint = v
  }
  return nil
}

func (p *Adapter) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Adapter"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Adapter) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *Adapter) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("typeHint", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:typeHint: ", p), err) }
  if err := oprot.WriteString(string(p.TypeHint)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.typeHint (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:typeHint: ", p), err) }
  return err
}

func (p *Adapter) String() string {
  if p == nil {
    return "<nil>"
  }

  nameVal := fmt.Sprintf("%v", p.Name)
  typeHintVal := fmt.Sprintf("%v", p.TypeHint)
  return fmt.Sprintf("Adapter({Name:%s TypeHint:%s})", nameVal, typeHintVal)
}

// Controls cpp <-> python FFI for a struct or union
// By default, struct uses marshal C API unless cpp.Type or cpp.Adapter is present
// on a field or a type
// Use this annotation to opt-in struct to marshal in spite of cpp.Type or cpp.Adapter
// Alternatively, use this struct with serialize = false to use serialization for FFI.
// 
// Attributes:
//  - Serialize
type UseCAPI struct {
  Serialize bool `thrift:"serialize,1" db:"serialize" json:"serialize"`
}

func NewUseCAPI() *UseCAPI {
  return &UseCAPI{}
}


func (p *UseCAPI) GetSerialize() bool {
  return p.Serialize
}
type UseCAPIBuilder struct {
  obj *UseCAPI
}

func NewUseCAPIBuilder() *UseCAPIBuilder{
  return &UseCAPIBuilder{
    obj: NewUseCAPI(),
  }
}

func (p UseCAPIBuilder) Emit() *UseCAPI{
  return &UseCAPI{
    Serialize: p.obj.Serialize,
  }
}

func (u *UseCAPIBuilder) Serialize(serialize bool) *UseCAPIBuilder {
  u.obj.Serialize = serialize
  return u
}

func (u *UseCAPI) SetSerialize(serialize bool) *UseCAPI {
  u.Serialize = serialize
  return u
}

func (p *UseCAPI) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UseCAPI)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Serialize = v
  }
  return nil
}

func (p *UseCAPI) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("UseCAPI"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UseCAPI) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("serialize", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serialize: ", p), err) }
  if err := oprot.WriteBool(bool(p.Serialize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serialize (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serialize: ", p), err) }
  return err
}

func (p *UseCAPI) String() string {
  if p == nil {
    return "<nil>"
  }

  serializeVal := fmt.Sprintf("%v", p.Serialize)
  return fmt.Sprintf("UseCAPI({Serialize:%s})", serializeVal)
}

